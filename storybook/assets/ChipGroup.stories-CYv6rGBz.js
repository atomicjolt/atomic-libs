import{j as e}from"./jsx-runtime-CkxqCPlQ.js";import{I as _,M as N}from"./helpers-D-Gur9Js.js";import{g as M}from"./cssprops-BO85xpNm.js";import{f as P}from"./index-YkVIqR4J.js";import{C as u}from"./ChipGroupField.component-D-Mo04zl.js";import{L as c}from"./Label.component-CeN98k3i.js";import{M as I}from"./Message.component-nkasZM07.js";import{E as F}from"./ErrorMessage.component-CfKzjo8L.js";import{C as o}from"./Chip.component-BqwAwV7e.js";import"./index-DJO9vBfz.js";import"./styled-components.browser.esm-BQf_XqKi.js";import"./index-DLW06VQL.js";import"./index-BDzxygkP.js";import"./index-C0DXmw5d.js";import"./index-CyCRagT9.js";import"./Collection-CnHW8amz.js";import"./CollectionBuilder-Xbel4YvD.js";import"./index-DJdX7xnk.js";import"./SSRProvider-DAMUgb6s.js";import"./useLayoutEffect-Bj1hLagI.js";import"./index-SU87TpAq.js";import"./scale-CqCDTNu0.js";import"./useRenderProps-Bk8BH60l.js";import"./index-i5X67GZP.js";import"./index-De95zDiF.js";import"./useObjectRef-BKue9pYL.js";import"./Provider-B9Eqn13H.js";import"./useCollectionRenderer-BjBmU679.js";import"./useControlledState-CN8sBTKq.js";import"./useSelectableItem-CDjoIRnz.js";import"./FocusScope-BnAoeAyt.js";import"./focusSafely-BOUv7I-8.js";import"./usePress-Cu0aM-K5.js";import"./useEvent-CXpXU_b4.js";import"./scrollIntoView-DuDju04b.js";import"./isScrollable-BSEN4xi5.js";import"./context-BQ3_Es2z.js";import"./useDescription-DnVXAhCi.js";import"./mixins-B7X2BZyR.js";import"./useListState-CDCY5W5g.js";import"./Label.context-ChhuUauO.js";import"./Message.context-BObz3Mtj.js";import"./ErrorMessage.context-D3SbpLIU.js";import"./filterDOMProps-CeZl_uWj.js";import"./useSelectableList-CW_SVv5R.js";import"./DOMLayoutDelegate-NL2UALsg.js";import"./useCollator-BQpRQjOj.js";import"./useField-mSuDlNxJ.js";import"./useLabel-CSTUXoQW.js";import"./useLabels-B24R2YQq.js";import"./useFocusWithin-DSbUfD8x.js";import"./utils-Df1WEgxG.js";import"./useHighlightSelectionDescription-Cdub3fbR.js";import"./LiveAnnouncer-CeCcBDbP.js";import"./useLocalizedStringFormatter-DBaQHtvd.js";import"./useUpdateEffect-BzsCcazj.js";import"./useHasTabbableChild-CnPy-0wR.js";import"./getScrollParent-BL0kfGii.js";import"./useFocusRing-CPkBIT8D.js";import"./useFocus-DJe2BRHe.js";import"./IconButton.component-BC26b8KI.js";import"./Button.component-SZWKT3t6.js";import"./useButton-AoKYWM9F.js";import"./useFocusable-o0N_IkwX.js";import"./useKeyboard-A8_doyNT.js";import"./useLink-ByNL9j8X.js";import"./SpinnerLoader.component-CF9bxXo5.js";import"./Loader.component-TyckDnEn.js";import"./Flex.component-DqBL6Xjb.js";import"./layout-B6NAx4l9.js";import"./utils-2VFVy79V.js";import"./Checkmark.component-uYKMesek.js";import"./Spinner.component-D3qB71XV.js";import"./ProgressCircle.component-DZo3rxOV.js";import"./useNumberFormatter-D5qg7lg6.js";import"./NumberFormatter-DNR9MAW-.js";import"./colors-x_YFGAop.js";import"./MaterialIcon.component-2YMyWhOU.js";import"./Icons.styles-BaNpbbIh.js";function p(l){const{label:i,message:n,error:m,labelPlacement:d="above",items:G,children:R,...V}=l;return e.jsxs(u,{...V,children:[d==="above"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),e.jsx(u.List,{items:G,beforeChildren:d==="inline"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),children:R}),n&&e.jsx(I,{children:n}),m&&e.jsx(F,{children:m})]})}try{p.displayName="ChipGroup",p.__docgenInfo={description:"A generic ChipGroup component that renders a group of chips with optional labels, messages, and error messages.",displayName:"ChipGroup",props:{labelPlacement:{defaultValue:null,description:`Whether the label is placed above the
group, or inline with the chips`,name:"labelPlacement",required:!1,type:{name:"enum",value:[{value:'"inline"'},{value:'"above"'}]}},isDisabled:{defaultValue:null,description:`Field cannot be interacted with, should be de-emphasized in the UI
@selector [data-disabled]`,name:"isDisabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Unique id for the component",name:"id",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Error message for the field",name:"error",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"Size of the component",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'},{value:'"auto"'},{value:'"full"'}]}},className:{defaultValue:null,description:`Add classes to the root element of the component.
Refer to this for possible values: https://github.com/JedWatson/classnames#readme`,name:"className",required:!1,type:{name:"Argument | Argument[]"}},label:{defaultValue:null,description:`A visible label for the field. Labels are always Sentence case.
If you do not provide a label, you should provide an aria-label or aria-labelledby attribute.`,name:"label",required:!1,type:{name:"ReactNode"}},name:{defaultValue:null,description:"Name of the Field",name:"name",required:!1,type:{name:"string"}},message:{defaultValue:null,description:"For additional information (ex. date format mm/dd/yy)",name:"message",required:!1,type:{name:"ReactNode"}},isRequired:{defaultValue:null,description:`Field must be interacted with. Should be indicated in the UI
@selector [data-required]`,name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Field has an error. Should be made to look like an error.\nControls whether the value of `error` is displayed\n@selector [data-invalid]",name:"isInvalid",required:!1,type:{name:"boolean"}}}}}catch{}const sr={title:"Chips/ChipGroup",component:p,parameters:{layout:"centered",cssprops:M("ChipGroup")},argTypes:{..._,...N,children:{control:!1},onRemove:{description:"Function to call when a chip is removed",table:{category:"Events"}}}},r={args:{label:"Chip Group",children:[e.jsx(o,{id:"news",children:"News"}),e.jsx(o,{id:"travel",children:"Travel"}),e.jsx(o,{id:"gaming",children:"Gaming"}),e.jsx(o,{id:"shopping",children:"Shopping"})]}},a={args:{...r.args,onRemove:P()}},t={args:{...r.args,selectionMode:"multiple",defaultSelectedKeys:["news","shopping"]}},s={args:{...r.args,disabledKeys:["shopping"]}};var h,g,f;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    label: "Chip Group",
    children: [<Chip id="news">News</Chip>, <Chip id="travel">Travel</Chip>, <Chip id="gaming">Gaming</Chip>, <Chip id="shopping">Shopping</Chip>]
  }
}`,...(f=(g=r.parameters)==null?void 0:g.docs)==null?void 0:f.source}}};var b,y,v;a.parameters={...a.parameters,docs:{...(b=a.parameters)==null?void 0:b.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    onRemove: fn()
  }
}`,...(v=(y=a.parameters)==null?void 0:y.docs)==null?void 0:v.source}}};var C,x,q;t.parameters={...t.parameters,docs:{...(C=t.parameters)==null?void 0:C.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    selectionMode: "multiple",
    defaultSelectedKeys: ["news", "shopping"]
  }
}`,...(q=(x=t.parameters)==null?void 0:x.docs)==null?void 0:q.source}}};var S,w,j;s.parameters={...s.parameters,docs:{...(S=s.parameters)==null?void 0:S.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    disabledKeys: ["shopping"]
  }
}`,...(j=(w=s.parameters)==null?void 0:w.docs)==null?void 0:j.source}}};const pr=["Primary","RemoveChip","MultipleSelection","DisabledChips"];export{s as DisabledChips,t as MultipleSelection,r as Primary,a as RemoveChip,pr as __namedExportsOrder,sr as default};
