import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{M as r}from"./Modal.component-s9GIiCWL.js";import{M as h}from"./MaterialIcon.component-CltyqK_l.js";import{T as f}from"./Text.component-qKJc8_-I.js";import{B as y}from"./Button.component-B0omMyTz.js";import"./index-BCtMShv3.js";import"./context-CHG5exGL.js";import"./FocusScope-DX4qyq_T.js";import"./useFocusable-DacP9xvE.js";import"./useObjectRef-D2RG7rRi.js";import"./SSRProvider-DyiXDq2k.js";import"./useFocusWithin-BshFo8_g.js";import"./usePress-B9aiz4Kw.js";import"./index-BqCLlfdy.js";import"./index-D-fs5e6L.js";import"./getScrollParent-BL0kfGii.js";import"./isScrollable-BSEN4xi5.js";import"./useOverlayTriggerState-P0osIcob.js";import"./PressResponder-DMBUHunT.js";import"./useControlledState-vzCMHZvt.js";import"./index-CsiUWFDz.js";import"./useRenderProps-CP918x9p.js";import"./index-EJ0-2BeM.js";import"./Modal.context-C8xYzeAB.js";import"./layout-C5ppTKTq.js";import"./spacing-Bd-CIscW.js";import"./utils-DqmNl-Il.js";import"./styled-components.browser.esm-Y4FpNNpy.js";import"./Flex.component-rrKmR1Yr.js";import"./Heading.component-Bz0Js2B4.js";import"./typography-B_qJ0BtB.js";import"./scale-CqCDTNu0.js";import"./colors-x_YFGAop.js";import"./index-J6U_l2Hf.js";import"./Icons.styles-D-JqKhr6.js";import"./filterDOMProps-CeZl_uWj.js";import"./useFocusRing-CLjBjOxD.js";import"./useButton-nVeIkIqk.js";import"./useLink-FIfyncSu.js";import"./mixins-XviowZ_6.js";import"./Button.context-BxdzJgC_.js";import"./SpinnerLoader.component-C1AkqoAE.js";import"./Loader.component-aO6Bak-V.js";import"./Checkmark.component-Bisr1A6O.js";import"./Spinner.component-C44VOTWe.js";import"./ProgressCircle.component-_TQleApR.js";import"./number-nHrFdSb-.js";import"./useLabel-DDcndmXW.js";import"./useLabels-B8dXFA8d.js";import"./useNumberFormatter-BHOsbS6G.js";import"./context-z6pb9OkM.js";import"./NumberFormatter-DNR9MAW-.js";function i(n){const{title:l,children:p,buttonText:d="Close",onClose:o,...c}=n;return e.jsx(r,{$width:"400px",...c,children:u=>e.jsxs(e.Fragment,{children:[e.jsxs(r.Header,{$justify:"start",children:[e.jsx(h,{icon:"error"}),e.jsx(r.Title,{children:l})]}),e.jsx(r.Body,{children:e.jsx(f,{$size:"3",children:p})}),e.jsx(r.Footer,{children:e.jsx(y,{variant:"error",type:"button",onPress:()=>{o==null||o(),u()},children:d})})]})})}try{i.displayName="ErrorModal",i.__docgenInfo={description:"Error Modal Component. For displaying an error message and a button to close the modal.\n\nKeep in mind that the `ErrorModal` is a simple wrapper around the `Modal` component for a simple error message.\nIf you need a more complex error modal, you can use the `Modal` component directly. [Check the ErrorModal implementation for a starting point](https://github.com/atomicjolt/atomic-libs/blob/main/packages/atomic-elements/src/components/Overlays/ErrorModal/ErrorModal.component.tsx)",displayName:"ErrorModal",props:{title:{defaultValue:null,description:"Must include a title. Titles are always in Title case.",name:"title",required:!0,type:{name:"string"}},buttonText:{defaultValue:null,description:"Text of the button to close the modal.",name:"buttonText",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"() => void"}},centered:{defaultValue:null,description:"Centers the modal within the viewport\n@deprecated Use `isCentered` instead",name:"centered",required:!1,type:{name:"boolean"}},isCentered:{defaultValue:null,description:"Centers the modal within the viewport",name:"isCentered",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"RenderClassName<never>"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"RenderStyle<never>"}}}}}catch{}const fe={title:"Overlays/Modals/ErrorModal",component:i,parameters:{docs:{story:{inline:!1,height:"400px"}}}},t={args:{isOpen:!0,title:"Error",children:"An error has occurred",buttonText:"Close",centered:!0}};var a,s,m;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  args: {
    isOpen: true,
    title: "Error",
    children: "An error has occurred",
    buttonText: "Close",
    centered: true
  }
}`,...(m=(s=t.parameters)==null?void 0:s.docs)==null?void 0:m.source}}};const ye=["Primary"];export{t as Primary,ye as __namedExportsOrder,fe as default};
