import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{M as _,I as N}from"./helpers-DsIbl1QZ.js";import{g as M}from"./cssprops-BO85xpNm.js";import{fn as P}from"./index-D1pa-M5k.js";import{C as u}from"./ChipGroupField.component-DKZ3ZIOG.js";import{L as c}from"./Label.component-Cev61dDQ.js";import{M as I}from"./Message.component-C_idOZHk.js";import{E as F}from"./ErrorMessage.component-yVGc6EDx.js";import{C as o}from"./Chip.component-uhm_A54r.js";import"./styled-components.browser.esm-B0S50oBn.js";import"./index-DmM0KDA7.js";import"./index-BgMabbOk.js";import"./index-DLW06VQL.js";import"./index-BDzxygkP.js";import"./Collection-CfmUX7eJ.js";import"./CollectionBuilder-BOiBnYCj.js";import"./index-CnHy7ftH.js";import"./index-nLeaPAJ8.js";import"./useFocusable-B7cTVP20.js";import"./useObjectRef-BO7mrmvR.js";import"./SSRProvider-nIDwi1ZO.js";import"./index-SU87TpAq.js";import"./spacing-Bd-CIscW.js";import"./scale-CqCDTNu0.js";import"./useRenderProps-BzxgHqRb.js";import"./index-CrEZfznw.js";import"./index-CqJC2f1M.js";import"./Provider-op_UCnZE.js";import"./useCollectionRenderer-Dwym1jfR.js";import"./useControlledState-sJfMLWrs.js";import"./useSelectableItem-CQFuthIx.js";import"./usePress-Cxy0og0d.js";import"./useEvent-Qm4q9YOK.js";import"./scrollIntoView-DuDju04b.js";import"./isScrollable-BSEN4xi5.js";import"./FocusScope-CLRP0VYY.js";import"./context-BF7eBGFA.js";import"./useDescription-CP-qk7_s.js";import"./mixins-CgZ-Dp8B.js";import"./useListState-wIipAK1w.js";import"./Label.context-8YwVGsEO.js";import"./Message.context-4_rHhebz.js";import"./ErrorMessage.context-D-RNFvKn.js";import"./filterDOMProps-CeZl_uWj.js";import"./useSelectableList-CerkSCCR.js";import"./DOMLayoutDelegate-NFyoR3Uz.js";import"./useCollator-DZEoqIyA.js";import"./useField-BhG43OVF.js";import"./useLabel-B1sX0IQZ.js";import"./useLabels-D0NjiLiF.js";import"./useFocusWithin-CrVHK3Cv.js";import"./useHighlightSelectionDescription-DKPvJoA_.js";import"./LiveAnnouncer-CeCcBDbP.js";import"./useUpdateEffect-gxShzMif.js";import"./useLocalizedStringFormatter-BJB32GAh.js";import"./useHasTabbableChild-5m2xZxEz.js";import"./getScrollParent-BL0kfGii.js";import"./useFocusRing-4PdL76fJ.js";import"./IconButton.component-p1QcXi0h.js";import"./Button.component-B61Bok0W.js";import"./useButton-DlM8S39G.js";import"./useLink-CqmZ9M1P.js";import"./SpinnerLoader.component-DhD2EpIF.js";import"./Loader.component-zjeSn0vc.js";import"./Flex.component-DSJ8Mwfi.js";import"./layout-C5ppTKTq.js";import"./utils-DqmNl-Il.js";import"./Checkmark.component-CdgaIQiV.js";import"./Spinner.component-fO3c5uZz.js";import"./ProgressCircle.component-dfZhFUDA.js";import"./useNumberFormatter-CH8tnwcW.js";import"./NumberFormatter-DNR9MAW-.js";import"./colors-x_YFGAop.js";import"./MaterialIcon.component-ue1xslV6.js";import"./Icons.styles-D2L4nNgu.js";function p(l){const{label:i,message:n,error:m,labelPlacement:d="above",items:G,children:R,...V}=l;return e.jsxs(u,{...V,children:[d==="above"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),e.jsx(u.List,{items:G,beforeChildren:d==="inline"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),children:R}),n&&e.jsx(I,{children:n}),m&&e.jsx(F,{children:m})]})}try{p.displayName="ChipGroup",p.__docgenInfo={description:"A generic ChipGroup component that renders a group of chips with optional labels, messages, and error messages.",displayName:"ChipGroup",props:{labelPlacement:{defaultValue:null,description:`Whether the label is placed above the
group, or inline with the chips`,name:"labelPlacement",required:!1,type:{name:"enum",value:[{value:'"inline"'},{value:'"above"'}]}},label:{defaultValue:null,description:`A visible label for the field. Labels are always Sentence case.
If you do not provide a label, you should provide an aria-label or aria-labelledby attribute.`,name:"label",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:`Add classes to the root element of the component.
Refer to this for possible values: https://github.com/JedWatson/classnames#readme`,name:"className",required:!1,type:{name:"Argument | Argument[]"}},id:{defaultValue:null,description:"Unique id for the component",name:"id",required:!1,type:{name:"string"}},size:{defaultValue:null,description:"Size of the component",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"auto"'},{value:'"medium"'},{value:'"large"'},{value:'"full"'}]}},isDisabled:{defaultValue:null,description:`Field cannot be interacted with, should be de-emphasized in the UI
@selector [data-disabled]`,name:"isDisabled",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"Error message for the field",name:"error",required:!1,type:{name:"ReactNode"}},name:{defaultValue:null,description:"Name of the Field",name:"name",required:!1,type:{name:"string"}},isRequired:{defaultValue:null,description:`Field must be interacted with. Should be indicated in the UI
@selector [data-required]`,name:"isRequired",required:!1,type:{name:"boolean"}},isInvalid:{defaultValue:null,description:"Field has an error. Should be made to look like an error.\nControls whether the value of `error` is displayed\n@selector [data-invalid]",name:"isInvalid",required:!1,type:{name:"boolean"}},message:{defaultValue:null,description:"For additional information (ex. date format mm/dd/yy)",name:"message",required:!1,type:{name:"ReactNode"}}}}}catch{}const ir={title:"Chips/ChipGroup",component:p,parameters:{layout:"centered",cssprops:M("ChipGroup")},argTypes:{...N,..._,children:{control:!1},onRemove:{description:"Function to call when a chip is removed",table:{category:"Events"}}}},r={args:{label:"Chip Group",children:[e.jsx(o,{id:"news",children:"News"}),e.jsx(o,{id:"travel",children:"Travel"}),e.jsx(o,{id:"gaming",children:"Gaming"}),e.jsx(o,{id:"shopping",children:"Shopping"})]}},a={args:{...r.args,onRemove:P()}},t={args:{...r.args,selectionMode:"multiple",defaultSelectedKeys:["news","shopping"]}},s={args:{...r.args,disabledKeys:["shopping"]}};var h,g,f;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    label: "Chip Group",
    children: [<Chip id="news">News</Chip>, <Chip id="travel">Travel</Chip>, <Chip id="gaming">Gaming</Chip>, <Chip id="shopping">Shopping</Chip>]
  }
}`,...(f=(g=r.parameters)==null?void 0:g.docs)==null?void 0:f.source}}};var b,y,v;a.parameters={...a.parameters,docs:{...(b=a.parameters)==null?void 0:b.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    onRemove: fn()
  }
}`,...(v=(y=a.parameters)==null?void 0:y.docs)==null?void 0:v.source}}};var C,x,q;t.parameters={...t.parameters,docs:{...(C=t.parameters)==null?void 0:C.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    selectionMode: "multiple",
    defaultSelectedKeys: ["news", "shopping"]
  }
}`,...(q=(x=t.parameters)==null?void 0:x.docs)==null?void 0:q.source}}};var S,w,j;s.parameters={...s.parameters,docs:{...(S=s.parameters)==null?void 0:S.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    disabledKeys: ["shopping"]
  }
}`,...(j=(w=s.parameters)==null?void 0:w.docs)==null?void 0:j.source}}};const or=["Primary","RemoveChip","MultipleSelection","DisabledChips"];export{s as DisabledChips,t as MultipleSelection,r as Primary,a as RemoveChip,or as __namedExportsOrder,ir as default};
