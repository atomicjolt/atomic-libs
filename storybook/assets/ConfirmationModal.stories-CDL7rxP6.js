import{j as e}from"./jsx-runtime-CkxqCPlQ.js";import{M as t}from"./Modal.component-bNfinTgp.js";import{T as x}from"./Text.component-D2g0GpWV.js";import{B as l}from"./Button.component-SZWKT3t6.js";import"./index-DJO9vBfz.js";import"./context-C_Tf37_9.js";import"./FocusScope-BnAoeAyt.js";import"./focusSafely-BOUv7I-8.js";import"./useLayoutEffect-Bj1hLagI.js";import"./SSRProvider-DAMUgb6s.js";import"./useFocusWithin-DSbUfD8x.js";import"./utils-Df1WEgxG.js";import"./useObjectRef-BKue9pYL.js";import"./getScrollParent-BL0kfGii.js";import"./isScrollable-BSEN4xi5.js";import"./useOverlayTriggerState-BXapIe9V.js";import"./PressResponder-Dqe7WJHR.js";import"./usePress-Cu0aM-K5.js";import"./index-DJdX7xnk.js";import"./useControlledState-CN8sBTKq.js";import"./index-De95zDiF.js";import"./useRenderProps-Bk8BH60l.js";import"./index-i5X67GZP.js";import"./Modal.context-CVWuW54q.js";import"./layout-B6NAx4l9.js";import"./index-CyCRagT9.js";import"./utils-2VFVy79V.js";import"./styled-components.browser.esm-BQf_XqKi.js";import"./Flex.component-DqBL6Xjb.js";import"./Heading.component-ZSfyCSq-.js";import"./typography-B_qJ0BtB.js";import"./scale-CqCDTNu0.js";import"./colors-x_YFGAop.js";import"./index-BDzxygkP.js";import"./View.component-BIeQ-0Ai.js";import"./useFocusRing-CPkBIT8D.js";import"./useFocus-DJe2BRHe.js";import"./useButton-AoKYWM9F.js";import"./filterDOMProps-CeZl_uWj.js";import"./useFocusable-o0N_IkwX.js";import"./useKeyboard-A8_doyNT.js";import"./useLink-ByNL9j8X.js";import"./mixins-B7X2BZyR.js";import"./SpinnerLoader.component-CF9bxXo5.js";import"./Loader.component-TyckDnEn.js";import"./Checkmark.component-uYKMesek.js";import"./Spinner.component-D3qB71XV.js";import"./ProgressCircle.component-DZo3rxOV.js";import"./useLabel-CSTUXoQW.js";import"./useLabels-B24R2YQq.js";import"./useNumberFormatter-D5qg7lg6.js";import"./context-BQ3_Es2z.js";import"./NumberFormatter-DNR9MAW-.js";function n(a){const{title:c,children:u,confirmText:h,rejectText:f="Cancel",onConfirm:r,onReject:i,...y}=a;return e.jsx(t,{$width:"400px",...y,children:m=>e.jsxs(e.Fragment,{children:[e.jsx(t.Header,{children:e.jsx(t.Title,{children:c})}),e.jsx(t.Body,{children:e.jsx(x,{$size:"3",children:u})}),e.jsxs(t.Footer,{children:[e.jsx(l,{variant:"secondary",onPress:()=>{i==null||i(),m()},children:f}),e.jsx(l,{variant:"primary",onPress:()=>{r==null||r(),m()},children:h})]})]})})}try{n.displayName="ConfirmationModal",n.__docgenInfo={description:"Confirmation Modal Component. For when you need a small modal to confirm an action, like deleting a record\n\nKeep in mind that the `ConfirmationModal` is a simple wrapper around the `Modal` component for a simple default\nIf you need a more complex modal, you can use the `Modal` component directly. [Check the ConfirmationModal implementation for a starting point](https://github.com/atomicjolt/atomic-libs/blob/main/packages/atomic-elements/src/components/Overlays/ConfirmationModal/ConfirmationModal.component.tsx)",displayName:"ConfirmationModal",props:{title:{defaultValue:null,description:"Must include a title. Titles are always in Title case.",name:"title",required:!0,type:{name:"string"}},confirmText:{defaultValue:null,description:`Should be descriptive instead of yes or no.
If you're confirming you want to delete something,
Delete is an appropriate string to use.`,name:"confirmText",required:!0,type:{name:"string"}},rejectText:{defaultValue:null,description:`This will replace 'Cancel' as the negative action.
Sometimes you might need it to say 'Close' or something instead.`,name:"rejectText",required:!1,type:{name:"string"}},onConfirm:{defaultValue:null,description:"Called when the user clicks on the button with `confirmText`",name:"onConfirm",required:!1,type:{name:"() => void"}},onReject:{defaultValue:null,description:"Called when the user clicks on the button with\n`rejectText` or when they attempt to close the modal by clicking\non the background",name:"onReject",required:!1,type:{name:"() => void"}},centered:{defaultValue:null,description:"Centers the modal within the viewport\n@deprecated Use `isCentered` instead",name:"centered",required:!1,type:{name:"boolean"}},isCentered:{defaultValue:null,description:"Centers the modal within the viewport",name:"isCentered",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"RenderClassName<never>"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"RenderStyle<never>"}}}}}catch{}const xe={title:"Overlays/Modals/ConfirmationModal",component:n,parameters:{docs:{story:{inline:!1,height:"400px"}}}},o={args:{isOpen:!0,title:"Delete Post?",children:"Are you sure you want to delete this post? This action cannot be undone.",confirmText:"Delete",centered:!0}};var s,p,d;o.parameters={...o.parameters,docs:{...(s=o.parameters)==null?void 0:s.docs,source:{originalSource:`{
  args: {
    isOpen: true,
    title: "Delete Post?",
    children: "Are you sure you want to delete this post? This action cannot be undone.",
    confirmText: "Delete",
    centered: true
  }
}`,...(d=(p=o.parameters)==null?void 0:p.docs)==null?void 0:d.source}}};const Ce=["Primary"];export{o as Primary,Ce as __namedExportsOrder,xe as default};
