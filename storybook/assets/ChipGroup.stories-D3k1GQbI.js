import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{M as _,I as N}from"./helpers-CVUqcLcb.js";import{g as M}from"./cssprops-BO85xpNm.js";import{C as o}from"./index-BoZ09a_N.js";import{fn as P}from"./index-D1pa-M5k.js";import{C as u}from"./ChipGroupField.component-4keWmREq.js";import{L as c}from"./Label.component-Cjxd55tP.js";import{M as I}from"./Message.component-B6INgsEF.js";import{E as F}from"./ErrorMessage.component-Bw4NU7_y.js";import"./styled-components.browser.esm-B0S50oBn.js";import"./index-DmM0KDA7.js";import"./spacing-Bd-CIscW.js";import"./scale-CqCDTNu0.js";import"./Collection-Blx8idkz.js";import"./CollectionBuilder-C8aBQCuV.js";import"./index-CnHy7ftH.js";import"./index-nLeaPAJ8.js";import"./useFocusable-DDF3Tgcq.js";import"./useObjectRef-BMBYa31u.js";import"./SSRProvider-nIDwi1ZO.js";import"./filterDOMProps-CeZl_uWj.js";import"./useSelectableList-BlmLA-dr.js";import"./useSelectableItem-BlMo16Kr.js";import"./usePress-BejIIMCm.js";import"./useEvent-DX5YI6yT.js";import"./scrollIntoView-DuDju04b.js";import"./isScrollable-BSEN4xi5.js";import"./FocusScope-DY128LIr.js";import"./context-BF7eBGFA.js";import"./useDescription-DEja_w9s.js";import"./DOMLayoutDelegate-CYEMPlg-.js";import"./useCollator-DZEoqIyA.js";import"./useField-BmPvDaI7.js";import"./useLabel-C1USB2dP.js";import"./useLabels-DqNC8NnF.js";import"./useFocusWithin-ypR2cHkl.js";import"./useHighlightSelectionDescription-C85o-wvc.js";import"./LiveAnnouncer-CeCcBDbP.js";import"./useUpdateEffect-gxShzMif.js";import"./useLocalizedStringFormatter-BJB32GAh.js";import"./useHasTabbableChild-C0I8xD55.js";import"./getScrollParent-BL0kfGii.js";import"./useFocusRing-CMFCJy1v.js";import"./index-9MQGFWEg.js";import"./useRenderProps-BzxgHqRb.js";import"./index-CrEZfznw.js";import"./mixins-CgZ-Dp8B.js";import"./IconButton.component-8BWc45Fv.js";import"./index-DklmvzLu.js";import"./Icons.styles-D2L4nNgu.js";import"./Button.component-CO_EKNnI.js";import"./useButton-EuBryRSZ.js";import"./useLink-ytEWay4y.js";import"./SpinnerLoader.component-C3aOYr0J.js";import"./Loader.component-CkFYGCWL.js";import"./Flex.component-CLGTqHVr.js";import"./layout-C5ppTKTq.js";import"./utils-DqmNl-Il.js";import"./Checkmark.component-CdBGiybJ.js";import"./Spinner.component-CXWvSCLl.js";import"./ProgressCircle.component-DE6AAkbz.js";import"./useNumberFormatter-CH8tnwcW.js";import"./NumberFormatter-DNR9MAW-.js";import"./colors-x_YFGAop.js";import"./Provider-op_UCnZE.js";import"./useCollectionRenderer-D0KC5ksC.js";import"./useControlledState-sJfMLWrs.js";import"./useListState-ekQbMX2i.js";import"./Label.context-BCDtyvV0.js";import"./Message.context-D6YW8C9h.js";import"./ErrorMessage.context-B9WfFUFn.js";function p(l){const{label:i,message:n,error:m,labelPlacement:d="above",items:G,children:R,...V}=l;return e.jsxs(u,{...V,children:[d==="above"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),e.jsx(u.List,{items:G,beforeChildren:d==="inline"&&i&&e.jsx(c,{$paddingBottom:"0px",children:i}),children:R}),n&&e.jsx(I,{children:n}),m&&e.jsx(F,{children:m})]})}try{p.displayName="ChipGroup",p.__docgenInfo={description:"A generic ChipGroup component that renders a group of chips with optional labels, messages, and error messages.",displayName:"ChipGroup",props:{labelPlacement:{defaultValue:null,description:`Whether the label is placed above the
group, or inline with the chips`,name:"labelPlacement",required:!1,type:{name:"enum",value:[{value:'"inline"'},{value:'"above"'}]}},isDisabled:{defaultValue:null,description:`Field cannot be interacted with, should be de-emphasized in the UI
@selector [data-disabled]`,name:"isDisabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Unique id for the component",name:"id",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"Error message for the field",name:"error",required:!1,type:{name:"ReactNode"}},size:{defaultValue:null,description:"Size of the component",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'},{value:'"auto"'},{value:'"full"'}]}},className:{defaultValue:null,description:`Add classes to the root element of the component.
Refer to this for possible values: https://github.com/JedWatson/classnames#readme`,name:"className",required:!1,type:{name:"Argument | Argument[]"}},label:{defaultValue:null,description:`A visible label for the field. Labels are always Sentence case.
If you do not provide a label, you should provide an aria-label or aria-labelledby attribute.`,name:"label",required:!1,type:{name:"ReactNode"}},isInvalid:{defaultValue:null,description:"Field has an error. Should be made to look like an error.\nControls whether the value of `error` is displayed\n@selector [data-invalid]",name:"isInvalid",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name of the Field",name:"name",required:!1,type:{name:"string"}},isRequired:{defaultValue:null,description:`Field must be interacted with. Should be indicated in the UI
@selector [data-required]`,name:"isRequired",required:!1,type:{name:"boolean"}},message:{defaultValue:null,description:"For additional information (ex. date format mm/dd/yy)",name:"message",required:!1,type:{name:"ReactNode"}}}}}catch{}const Ye={title:"Chips/ChipGroup",component:p,parameters:{layout:"centered",cssprops:M("ChipGroup")},argTypes:{...N,..._,children:{control:!1},onRemove:{description:"Function to call when a chip is removed",table:{category:"Events"}}}},r={args:{label:"Chip Group",children:[e.jsx(o,{id:"news",children:"News"}),e.jsx(o,{id:"travel",children:"Travel"}),e.jsx(o,{id:"gaming",children:"Gaming"}),e.jsx(o,{id:"shopping",children:"Shopping"})]}},a={args:{...r.args,onRemove:P()}},t={args:{...r.args,selectionMode:"multiple",defaultSelectedKeys:["news","shopping"]}},s={args:{...r.args,disabledKeys:["shopping"]}};var h,g,f;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    label: "Chip Group",
    children: [<Chip id="news">News</Chip>, <Chip id="travel">Travel</Chip>, <Chip id="gaming">Gaming</Chip>, <Chip id="shopping">Shopping</Chip>]
  }
}`,...(f=(g=r.parameters)==null?void 0:g.docs)==null?void 0:f.source}}};var b,y,v;a.parameters={...a.parameters,docs:{...(b=a.parameters)==null?void 0:b.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    onRemove: fn()
  }
}`,...(v=(y=a.parameters)==null?void 0:y.docs)==null?void 0:v.source}}};var C,x,q;t.parameters={...t.parameters,docs:{...(C=t.parameters)==null?void 0:C.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    selectionMode: "multiple",
    defaultSelectedKeys: ["news", "shopping"]
  }
}`,...(q=(x=t.parameters)==null?void 0:x.docs)==null?void 0:q.source}}};var S,w,j;s.parameters={...s.parameters,docs:{...(S=s.parameters)==null?void 0:S.docs,source:{originalSource:`{
  args: {
    ...Primary.args,
    disabledKeys: ["shopping"]
  }
}`,...(j=(w=s.parameters)==null?void 0:w.docs)==null?void 0:j.source}}};const Ze=["Primary","RemoveChip","MultipleSelection","DisabledChips"];export{s as DisabledChips,t as MultipleSelection,r as Primary,a as RemoveChip,Ze as __namedExportsOrder,Ye as default};
