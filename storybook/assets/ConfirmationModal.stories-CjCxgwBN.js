import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{M as t}from"./Modal.component-DHF-Grfk.js";import{T as x}from"./Text.component-BfsDNNuI.js";import{B as s}from"./Button.component-D-0YblQa.js";import"./index-BCtMShv3.js";import"./context-AES9ne4t.js";import"./FocusScope-DX4qyq_T.js";import"./useFocusable-DacP9xvE.js";import"./useObjectRef-D2RG7rRi.js";import"./SSRProvider-DyiXDq2k.js";import"./useFocusWithin-AgzTPs3-.js";import"./usePress-CzUfyTu7.js";import"./index-BqCLlfdy.js";import"./index-D-fs5e6L.js";import"./getScrollParent-BL0kfGii.js";import"./isScrollable-BSEN4xi5.js";import"./useOverlayTriggerState-e1JH9f22.js";import"./PressResponder-Ct7jIFb_.js";import"./useControlledState-vzCMHZvt.js";import"./index-CsiUWFDz.js";import"./useRenderProps-CP918x9p.js";import"./index-EJ0-2BeM.js";import"./Modal.context-C8xYzeAB.js";import"./layout-Dd7m2B0D.js";import"./spacing-Bd-CIscW.js";import"./utils-DqmNl-Il.js";import"./styled-components.browser.esm-Y4FpNNpy.js";import"./index-DzGcUmQS.js";import"./Heading.component-7pgoIKIJ.js";import"./typography-B_qJ0BtB.js";import"./scale-CqCDTNu0.js";import"./colors-x_YFGAop.js";import"./index-V5Hbp4UL.js";import"./BaseButton-D6Nzh501.js";import"./mixins-XviowZ_6.js";import"./useFocusRing-88kjlAJd.js";import"./useButton-DYDUZLxM.js";import"./filterDOMProps-CeZl_uWj.js";import"./useLink-D8UViwUR.js";import"./SpinnerLoader.component-Dq5iEhX6.js";import"./Loader.component-CsFH7sO8.js";import"./Checkmark.component-Bisr1A6O.js";import"./Spinner.component-C59bpdXu.js";import"./ProgressCircle.component-gsiCSqhQ.js";import"./number-nHrFdSb-.js";import"./useLabel-DDcndmXW.js";import"./useLabels-B8dXFA8d.js";import"./useNumberFormatter-BHOsbS6G.js";import"./context-z6pb9OkM.js";import"./NumberFormatter-DNR9MAW-.js";import"./Button.context-BxdzJgC_.js";function r(a){const{title:c,children:u,confirmText:h,rejectText:f="Cancel",onConfirm:o,onReject:n,...y}=a;return e.jsx(t,{$width:"400px",...y,children:l=>e.jsxs(e.Fragment,{children:[e.jsx(t.Header,{children:e.jsx(t.Title,{children:c})}),e.jsx(t.Body,{children:e.jsx(x,{$size:"3",children:u})}),e.jsxs(t.Footer,{children:[e.jsx(s,{variant:"secondary",onPress:()=>{n==null||n(),l()},children:f}),e.jsx(s,{variant:"primary",onPress:()=>{o==null||o(),l()},children:h})]})]})})}try{r.displayName="ConfirmationModal",r.__docgenInfo={description:"Confirmation Modal Component. For when you need a small modal to confirm an action, like deleting a record\n\nKeep in mind that the `ConfirmationModal` is a simple wrapper around the `Modal` component for a simple default\nIf you need a more complex modal, you can use the `Modal` component directly. [Check the ConfirmationModal implementation for a starting point](https://github.com/atomicjolt/atomic-libs/blob/main/packages/atomic-elements/src/components/Overlays/ConfirmationModal/ConfirmationModal.component.tsx)",displayName:"ConfirmationModal",props:{title:{defaultValue:null,description:"Must include a title. Titles are always in Title case.",name:"title",required:!0,type:{name:"string"}},confirmText:{defaultValue:null,description:`Should be descriptive instead of yes or no.
If you're confirming you want to delete something,
Delete is an appropriate string to use.`,name:"confirmText",required:!0,type:{name:"string"}},rejectText:{defaultValue:null,description:`This will replace 'Cancel' as the negative action.
Sometimes you might need it to say 'Close' or something instead.`,name:"rejectText",required:!1,type:{name:"string"}},onConfirm:{defaultValue:null,description:"Called when the user clicks on the button with `confirmText`",name:"onConfirm",required:!1,type:{name:"() => void"}},onReject:{defaultValue:null,description:"Called when the user clicks on the button with\n`rejectText` or when they attempt to close the modal by clicking\non the background",name:"onReject",required:!1,type:{name:"() => void"}},centered:{defaultValue:null,description:"Centers the modal within the viewport\n@deprecated Use `isCentered` instead",name:"centered",required:!1,type:{name:"boolean"}},isCentered:{defaultValue:null,description:"Centers the modal within the viewport",name:"isCentered",required:!1,type:{name:"boolean"}},ensureVisible:{defaultValue:null,description:`Ensures the modal is visible by scrolling it into view.

This is typically unnecessary since modals are automatically
centered in the browser viewport. However, when rendering
within an iframe that exceeds the parent viewport height,
the optimal placement cannot be determined. In this case,
the modal is positioned at the top of the page and
automatically scrolled into view.`,name:"ensureVisible",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"RenderClassName<never>"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"RenderStyle<never>"}}}}}catch{}const fe={title:"Overlays/Modals/ConfirmationModal",component:r,parameters:{docs:{story:{inline:!1,height:"400px"}}}},i={args:{isOpen:!0,title:"Delete Post?",children:"Are you sure you want to delete this post? This action cannot be undone.",confirmText:"Delete",centered:!0}};var m,p,d;i.parameters={...i.parameters,docs:{...(m=i.parameters)==null?void 0:m.docs,source:{originalSource:`{
  args: {
    isOpen: true,
    title: "Delete Post?",
    children: "Are you sure you want to delete this post? This action cannot be undone.",
    confirmText: "Delete",
    centered: true
  }
}`,...(d=(p=i.parameters)==null?void 0:p.docs)==null?void 0:d.source}}};const ye=["Primary"];export{i as Primary,ye as __namedExportsOrder,fe as default};
