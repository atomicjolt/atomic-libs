"use strict";(self.webpackChunkatomic_packages=self.webpackChunkatomic_packages||[]).push([[7077],{2983:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"Validations","title":"Validations","description":"Each component supports a set of pre-defined validations that can be passed in as props.","source":"@site/../packages/forms/docs/Validations.mdx","sourceDirName":".","slug":"/Validations","permalink":"/atomic-libs/forms/Validations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Usage","permalink":"/atomic-libs/forms/Usage"}}');var i=t(4848),o=t(8453);const s={},r="Validations",l={},m=[{value:"Custom Validations",id:"custom-validations",level:2},{value:"Multiple Validations",id:"multiple-validations",level:3}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"validations",children:"Validations"})}),"\n",(0,i.jsx)(e.p,{children:"Each component supports a set of pre-defined validations that can be passed in as props."}),"\n",(0,i.jsxs)(e.p,{children:["These props essentially match the API of the ",(0,i.jsxs)(e.a,{href:"https://react-hook-form.com/docs/useform/register",children:[(0,i.jsx)(e.code,{children:"react-hook-form"})," register() function"]}),",\nbut they're only exposed on the components that make sense. For example, the ",(0,i.jsx)(e.code,{children:"Form.TextInput"})," component supports\nthe ",(0,i.jsx)(e.code,{children:"minLength"})," and ",(0,i.jsx)(e.code,{children:"maxLength"})," props, and the ",(0,i.jsx)(e.code,{children:"Form.NumberInput"})," component supports the ",(0,i.jsx)(e.code,{children:"minValue"})," and ",(0,i.jsx)(e.code,{children:"maxValue"})," props, but not vice versa."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'import { Form  } from \'@atomicjolt/forms\';\n\nconst MyForm = () => {\n   const onSubmit = (data) => {\n     console.log(data);\n   }\n\n   const isEmail = (value: string) => {\n        if (!value) {\n            return "Email is required";\n        }\n        if (!value.includes("@")) {\n            return "Email must be valid";\n        }\n        return true;\n    }\n\n   return (\n      <Form onSubmit={onSubmit}>\n         <Form.TextInput\n            name="firstName"\n            label="First Name"\n            minLength={{ value: 3, message: "Name must be 3 characters or longer" }}\n            isRequired="First names is required"\n         />\n         <Form.TextInput\n            name="lastName"\n            label="Last Name"\n            isRequired="Last name is Required"\n         />\n         <Form.NumberInput\n            name="age"\n            label="Age"\n            minValue={{ value: 13, message: "You must be 13 or older to sign up" }}\n         />\n         <Form.SubmitButton>Submit</Form.SubmitButton>\n      </Form>\n   )\n};\n'})}),"\n",(0,i.jsx)(e.p,{children:"Attempting to submit the above form without valid data will result in the related error\nmessages being displayed below each input & the form will not submit."}),"\n",(0,i.jsx)(e.h2,{id:"custom-validations",children:"Custom Validations"}),"\n",(0,i.jsxs)(e.p,{children:["You can also pass in a custom validation function to the ",(0,i.jsx)(e.code,{children:"validate"})," prop."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'import { Form } from \'@atomicjolt/forms\';\n\nconst MyForm = () => {\n   const onSubmit = (data) => {\n     console.log(data);\n   }\n\n   const isEmail = (value: string) => {\n        if (!value) {\n            return "Email is required";\n        }\n        if (!value.includes("@")) {\n            return "Email must be valid";\n        }\n        return true;\n    }\n\n   return (\n      <Form onSubmit={onSubmit}>\n         <Form.TextInput name="firstName" label="First Name" />\n         <Form.TextInput name="lastName" label="Last Name" />\n         <Form.TextInput name="email" label="Email" validate={isEmail} />\n         <Form.SubmitButton>Submit</Form.SubmitButton>\n      </Form>\n   )\n};\n'})}),"\n",(0,i.jsx)(e.h3,{id:"multiple-validations",children:"Multiple Validations"}),"\n",(0,i.jsx)(e.p,{children:"If you have multiple validations, you can also pass in an object"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:'import { Form } from \'@atomicjolt/forms\';\n\nconst MyForm = () => {\n   const onSubmit = (data) => {\n     console.log(data);\n   }\n\n   const isEmail = (value) => {\n      if (!value) {\n         return "Email is required";\n      }\n      if (!value.includes("@")) {\n         return "Email must be valid";\n      }\n      return true;\n   }\n\n   const isDomainEmail = (value) => {\n      if (!value) {\n         return "Email is required";\n      }\n      if (!value.includes("@domain.com")) {\n         return "Email must be from domain.com";\n      }\n      return true;\n   }\n\n   return (\n        <Form onSubmit={onSubmit}>\n            <Form.TextInput name="firstName" label="First Name" />\n            <Form.TextInput name="lastName" label="Last Name" />\n            <Form.TextInput\n                name="email"\n                label="Email"\n                validate={{ isEmail, isDomainEmail }}\n            />\n            <Form.SubmitButton>Submit</Form.SubmitButton>\n        </Form>\n   )\n};\n'})})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);