"use strict";(self.webpackChunkatomic_packages=self.webpackChunkatomic_packages||[]).push([[8825],{4704:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Guides/Localization","title":"Localization","description":"Atomic Elements components are designed to work with multiple languages and locales. The components are built to be easily localized, and we provide a number of tools to help you do so.","source":"@site/../packages/atomic-elements/docs/Guides/Localization.mdx","sourceDirName":"Guides","slug":"/Guides/Localization","permalink":"/atomic-libs/elements/Guides/Localization","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Composition vs Props API","permalink":"/atomic-libs/elements/Guides/Fields/CompositionVsProps"},"next":{"title":"Routing","permalink":"/atomic-libs/elements/Guides/Routing"}}');var i=t(4848),s=t(8453);t(6540);const a={},l="Localization",r={},c=[{value:"Customizing the Locale",id:"customizing-the-locale",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"localization",children:"Localization"})}),"\n",(0,i.jsx)(o.p,{children:"Atomic Elements components are designed to work with multiple languages and locales. The components are built to be easily localized, and we provide a number of tools to help you do so."}),"\n",(0,i.jsx)(o.admonition,{type:"note",children:(0,i.jsxs)(o.p,{children:["Localization support for components is currently in-progress. If you need better support for localization in a component please ",(0,i.jsx)(o.a,{href:"https://github.com/atomicjolt/atomic-libs/issues/new",children:"open an issue"})]})}),"\n",(0,i.jsx)(o.h2,{id:"customizing-the-locale",children:"Customizing the Locale"}),"\n",(0,i.jsxs)(o.p,{children:["By default, the locale is determined by the user's browser settings. You can override this by wrapping your component in a ",(0,i.jsx)(o.code,{children:"LocaleProvider"})," and setting the ",(0,i.jsx)(o.code,{children:"locale"})," prop."]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-jsx",children:'import { LocaleProvider } from "@atomicjolt/atomic-elements";\n\n<LocaleProvider locale="en">{/* Your app here */}</LocaleProvider>;\n'})})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>l});var n=t(6540);const i={},s=n.createContext(i);function a(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);