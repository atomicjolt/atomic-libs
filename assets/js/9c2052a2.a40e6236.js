"use strict";(self.webpackChunkatomic_packages=self.webpackChunkatomic_packages||[]).push([[7797],{3172:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Guides/Accessibility","title":"Accessibility","description":"Aria Announcements","source":"@site/../packages/atomic-elements/docs/Guides/Accessibility.mdx","sourceDirName":"Guides","slug":"/Guides/Accessibility","permalink":"/atomic-libs/elements/Guides/Accessibility","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Migrating","permalink":"/atomic-libs/elements/Migrating"},"next":{"title":"Collection Components","permalink":"/atomic-libs/elements/Guides/Collections"}}');var t=o(4848),s=o(8453);const c={},r="Accessibility",l={},a=[{value:"Aria Announcements",id:"aria-announcements",level:2},{value:"<code>LiveAnnouncer</code>",id:"liveannouncer",level:3},{value:"<code>withAnnouncer</code>",id:"withannouncer",level:3},{value:"<code>LiveMessage</code>",id:"livemessage",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"accessibility",children:"Accessibility"})}),"\n",(0,t.jsx)(n.h2,{id:"aria-announcements",children:"Aria Announcements"}),"\n",(0,t.jsxs)(n.p,{children:["Atomic Elements implementation of live announcements is mostly implemented to be compatible with: ",(0,t.jsx)(n.a,{href:"https://github.com/AlmeroSteyn/react-aria-live",children:"react-aria-live"})," which we used previously."]}),"\n",(0,t.jsx)(n.h3,{id:"liveannouncer",children:(0,t.jsx)(n.code,{children:"LiveAnnouncer"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"LiveAnnouncer"})," components provides a context to the rest of your application to announce messages to screen readers. It is used in conjunction with the ",(0,t.jsx)(n.code,{children:"useAnnouncer"})," hook."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { LiveAnnouncer, useAnnouncer } from "@atomicjolt/atomic-elements";\n\nfunction Example() {\n  const { announcePolite } = useAnnouncer();\n\n  return (\n    <div>\n      <button onClick={() => announcePolite("Hello World")}>\n        Announce Hello World\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <LiveAnnouncer>\n      <Example />\n    </LiveAnnouncer>\n  );\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"withannouncer",children:(0,t.jsx)(n.code,{children:"withAnnouncer"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"withAnnouncer"})," HOC provides a way to access the context of the ",(0,t.jsx)(n.code,{children:"LiveAnnouncer"})," component in a class component."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { withAnnouncer } from "@atomicjolt/atomic-elements";\n\nclass Example extends React.Component {\n  render() {\n    const { announcePolite } = this.props;\n\n    return (\n      <div>\n        <button onClick={() => announcePolite("Hello World")}>\n          Announce Hello World\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default withAnnouncer(Example);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"livemessage",children:(0,t.jsx)(n.code,{children:"LiveMessage"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"LiveMessage"})," component will announce it's ",(0,t.jsx)(n.code,{children:"message"})," prop to screen readers when it is rendered."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'import { LiveMessage } from "@atomicjolt/atomic-elements";\n\nfunction Example() {\n  return <LiveMessage message="Hello World" />;\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note"}),": The ",(0,t.jsx)(n.code,{children:"LiveMessage"})," component is mostly just for compatabiltiy with the for mentioned package. It is recommended to use the ",(0,t.jsx)(n.code,{children:"useAnnouncer"})," hook instead."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var i=o(6540);const t={},s=i.createContext(t);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);