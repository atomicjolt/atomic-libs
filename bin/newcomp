#!/usr/bin/env ruby
require 'fileutils'
require 'erb'


class NewComp
  @@root_path = File.expand_path(File.join(__dir__, '..'))
  @@components_dir = @@root_path + '/src/components'

  def initialize(path)
    @path = path
  end

  def main
    if ARGV.length != 1
      puts 'usage: newcomp <ComponentPath/ComponentName>'
      exit(1)
    end

    comp = @path.split('/')
    comp_path = comp.join('/')
    comp_name = comp.last
    full_path = @@components_dir + "/" + comp_path

    if Dir.exist?(full_path)
      puts "Component already exists!"
      exit(1)
    end

    create(full_path, comp_path, comp_name)
  end

  def create(full_path, comp_path, name)
    FileUtils.mkdir_p(full_path)
    component = Renderer.new("component.tsx.erb", path: comp_path, name: name).render
    File.open("#{full_path}/index.tsx", "w") { |f| f.write(component) }

    story = Renderer.new("story.tsx.erb", path: comp_path, name: name).render
    File.open("#{full_path}/#{name}.stories.tsx", "w") { |f| f.write(story) }

    spec = Renderer.new('spec.tsx.erb', path: comp_path, name: name).render
    File.open("#{full_path}/#{name}.spec.tsx", "w") { |f| f.write(spec) }

    FileUtils.touch("#{full_path}/styles.scss")
  end
end

class Renderer
  def initialize(path, **kwargs)
    @template = File.read(File.expand_path(path, __dir__ + "/templates"))
    kwargs.each do |key, value|
      instance_variable_set("@#{key}".to_sym , value)
    end
  end

  def render
    renderer.result(binding)
  end

  def renderer
    return ERB.new(@template)
  end
end


NewComp.new(ARGV[0]).main